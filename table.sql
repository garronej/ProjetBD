SET AUTOCOMMIT OFF
 
BEGIN TRANSACTION création_des_tables --On démarre une transaction et on lui donne un nom
 
DECLARE @errors INTEGER
 
SET @errors = 0 --On déclare notre variable à 0
------------------------------
--Creation de la table adresse
------------------------------

CREATE TABLE ADRESSES(
IdAdresse INTEGER GENERATED ALWAYS AS IDENTITY ON NULL AS IDENTITY,
numRue INTEGER NOT NULL,
nomRue VARCHAR(20) NOT NULL,
cp NCHAR(5) NOT NULL,
ville VARCHAR(20) NOT NULL,
	CONSTRAINT PK_ID_ADRESSE 
		PRIMARY KEY (IdAdresse)
	CONSTRAINT MUST_BE_POSITIVE
		CHECK(NumRue>0),
	CONSTRAINT NOT_UNIQUE_NUMRUE_NOMRUE_CP
		UNIQUE (numRue, nomRue, cp),
);
SET @errors = @errors + @@ERROR

-------------------------------
--Creation de la table pizzeria
-------------------------------
CREATE TABLE PIZZERIAS(
	IdPizzeria INTEGER GENERATED BY DEFAULT ON NULL AS IDENTITY,
	NomPizzeria VARCHAR(20),
	IdAdresse INTEGER,
		CONSTRAINT PK_ID_PIZZERIA
			PRIMARY KEY (IdPizzeria),
		CONSTRAINT FK_ADRESSE_PIZZERIAS
			FOREIGN KEY(IdAdresse) REFERENCES ADRESSES
			ON UPDATE CASCADE
);
SET @errors = @errors + @@ERROR

-------------------------------
--Creation de la table personne
-------------------------------
CREATE TABLE PERSONNES(
	mail VARCHAR(30),
	nom VARCHAR(20) NOT NULL,
	prenome VARCHAR(20) NOT NULL,
	telephone VARCHAR(15) NOT NULL,
	idAdresse INTEGER,
		CONSTRAINT PK_MAIL 
			PRIMARY KEY (mail)
		CONSTRAINT FK_ADRESSE_PERSSONES,
			FOREIGN KEY (IdAdresse) REFERENCES ADRESSES,
		CONSTAINT NOT_UNIQUE_NOM_PERNOM_IDADRESSE
			UNIQUE (nom, prenom, idAdresse),
		CONSTRAINT VIOLATION_UNIQUE_NOM_PRENOM_TELEPHONE
			UNIQUE (nom, prenom, telephone),
);
CREATE UNIQUE INDEX idxNomPrenomAdresse ON PERSONNES(nom, prenom, idAdresse);
CREATE UNIQUE INDEX idxNomPrenomTellephone ON PERSONNES(nom, prenom, telephone);
SET @error = @error + @@ERROR

-------------------------------
--Creation de la table clients
-------------------------------
CREATE TABLE CLIENTS(
	idPizzeria INTEGER,
	noClient INTEGER GENERATED BY DEFAULT ON NULL AS IDENTITY,
	mail VARCHAR(30),
		CONSTRAINT PK_ID_Clients
			PRIMARY KEY(idPizzeria, noClient)
		CONSTRAINT FK_Pizzeria_Clients,
			FOREIGN KEY(idPizzeria) REFERENCES PIZZERIAL(idPizzeria)
		CONSTRAINT FK_Mail_Clients
			FOREIGN KEY(mail) REFERENCES PERSONNES,
		CONSTRAINT VIOLATION_POSITIV_CONSTRAINT_CLIENT
			CHECK (CodeClient>0 AND NoClient>0)
);
SET @error = @error + @@ERROR

-------------------------------
--Creation de la table employes
-------------------------------
CREATE TABLE EMPLOYES(
	IdPizzeria INTEGER NOT NULL,
	NoEmploye INTEGER GENERATED BY DEFAULT ON NULL AS IDENTITY ,
	dateNaissance DATE NOT NULL,
	Mail VARCHAR(30) NOT NULL,
		CONSTRAINT PK_IDEMPLOYE
			PRIMARY KEY(IdPizzeria, NoEmploye),
		CONSTRAINT FK_CodePersonne_Employes 
			FOREIGN KEY(Mail) REFERENCES PERSONNES(Mail),
		CONSTRAINT FK_IdPizzeria_Employes
			FOREIGN KEY(IdPizzeria) REFERENCES PIZZERIAS,
		CONSTRAINT UNIQUE_IDPIZZERIA_MAIL --Un employe ne peux travailler que dans une pizzeria
			UNIQUE (idPizzeria, mail),
		CONSTRAINT VIOLATION_POSITIV_NOEMPLOYE 
			CHECK (NoEmploye>0)
);
CREATE UNIQUE INDEX idxPizzeriaMail ON PERSONNES(idPizzeria, mail);
SET @error = @error + @@ERROR

-------------------------------
--Creation de la table livreurs
-------------------------------

CREATE TABLE LIVREURS(
	IdPizzeria INTEGER NOT NULL,
	NoLivreur INTEGER GENERATED BY DEFAULT ON NULL AS IDENTITY,
		CONSTRAINT PK_IDPIZZERIA_NOLIVREUR
			PRIMARY KEY(IdPizzeria, NoLivreur),
		CONSTRAINT FK_IdPizzeria_NoLivreurs
			FOREIGN KEY(IdPizzeria, NoLivreur) REFERENCES EMPLOYES(IdPizzeria, NoEmploye),
		CONSTRAINT MoreZero_Livreurs 
			CHECK (NoLivreur>0)
);
SET @errors = @errors + @@ERROR

-----------------------------------
--Creation de la table responsables
-----------------------------------
CREATE TABLE RESPONSABLES(
	IdPizzeria INTEGER,
	NoEmploye INTEGER,
	CONTRAINT PK_IDPIZZERIA_NOEMPLOYE
		PRIMARY KEY(idPizzeria, noEmploye),
	CONSTRAINT FK_IdPizzeria_NoEmploye_Employes 
		FOREIGN KEY(IdPizzeria, NoEmploye) REFERENCES EMPLOYES
);
SET @errors = @errors + @@ERROR

--------------------------------------
--Creation de la table permis_vehicule
--------------------------------------
CREATE TABLE PERMIS_VEHICULE(
	TypeVehicule NCHAR(1)  PRIMARY KEY,
		CONSTRAINT Non_Exist_TypeVehicule 
			CHECK(TypeVehicule IN (‘A’, ‘B’, ‘C’, ‘D’, ‘E’) )
);
SET @errors = @errors + @@ERROR

-------------------------------
--Creation de la table vehicule
-------------------------------
CREATE TABLE VEHICULES(
	IdPizzeria INTEGER,
	NoPlaque VARCHAR(10) NOT NULL,
	TypeVehicule NCHAR(1),
	CONSTRAINT PK_IDPIZZERIA_NOPLAQUE
		PRIMARY KEY(idPizzeria, noPlaque),
	CONSTRAINT FK_IdPizzeria_Vehicules
		FOREIGN KEY(IdPizzeria) REFERENCES PIZZERIAS(IdPizzeria),
	CONSTRAINT FK_TypeVehicule_Vehicules 
		FOREIGN KEY(typeVehicule) REFERENCES PERMIS_VEHICULE,
	CONSTRAINT VIOLATION_UNIQUE_NO_PLAQUE
		UNIQUE (NoPlaque)
);
SET @errors = @errors + @@ERROR

-----------------------------
--Creation de la table pizzas
-----------------------------
CREATE TABLE PIZZAS(
	IdPizzeria INTEGER,
	NomPizza VARCHAR(20) NOT NULL,
	Taille VARCHAR(7) NOT NULL,
	Prix NUMBER(*,2) NOT NULL,
		CONSTRAINT PK_ID_Pizzas 
			PRIMARY KEY (IdPizzeria, NomPizza, TaillePizza),
		CONSTRAINT VIOLATION_POSITIVE_CONSTAINT_PIZZA 
			CHECK (Taille>0 AND Prix>0),
		CONSTRAINT Non_Exist_Taille 
			CHECK (Taille IN (‘Mini’,’Moyenne’,’Grande’))
);
SET @errors = @errors + @@ERROR


--------------------------------
--Creation de la table commandes
--------------------------------
CREATE TABLE COMMANDES(
	idPizzeria INTEGER,
	noCommande INTEGER GENERATED BY  DEFAULT ON NULL AS IDENTITY,
	prixCommande NUMBER(*,2), --sommes des lignes commandes TODO
	heurDebut TIMESTAMP NOT NULL,
	CONSTRAINT PK_ID_Commandes PRIMARY
		KEY(IdPizzeria, NoCommande)
	CONSTRAINT VIOLATION_POSITIV_CONSTRAINT_COMMANDE
		CHECK (NoCommande > 0),
	CONSTRAINT FK_IdPizzeria_Commandes 
		FOREIGNKEY(IdPizzeria) REFERENCES PIZZERIAS,
);
SET @errors = @errors + @@ERROR

--CREATE FUNCTION getPrixCommande( idPizzeriaIn in INTEGER, noCommandeIn in INTEGER) 
--RETURNS  AS '
--
--SELECT SUM(prixLigne) AS result 
--FROM LIGNES_COMANDE
--WHERE idPizzeria=$1 AND noCommande=$2;
--
--UPDATE COMMANDES
--SET prixCommande = result
--WHERE idPizzeria=$1 ANS noCommande=$2
--' LANGUAGE SQL;



--------------------------------------
--Creation de la table lignes commande
--------------------------------------
CREATE TABLE LIGNES_COMMANDE(
	idPizzeria INTEGER,
	noCommande INTEGER,
	noLigne INTEGER GENERATED BY  DEFAULT ON NULL AS IDENTITY, NomPizza VARCHAR(20), Taille VARCHAR(7),
	nbPizza INTEGER NOT NULL,
	prixLigne NUMBER(*,2), --prix d'une ligne a calculer
		CONSTRAINT PK_IDPIZZERIA_NOCOMMANDE_NOLIGNE
			PRIMARY KEY (idPizzeria, noCommande, noLigne),
		CONSTRAINT VIOLATION_POSITIV_CONSTRAINT_LIGNE_COMMANDE
			CHECK (NoLigne>0 AND NbPizza>0 ),
		CONSTRAINT FK_IdPizzaeria_NoCommande 
			FOREIGN KEY(IdPizzeria, NoCommande) REFERENCES COMMANDES(IdPizzeria, NoCommande),
		CONSTRAINT FK_NomPizza_Taille 
			FOREIGN KEY(IdPizzeria, NomPizza, Taille) REFERENCES PIZZAS
);
SET @errors = @errors + @@ERROR



--------------------------------
--Creation de la table livraison
--------------------------------
CREATE TABLE LIVRAISONS(
	idPizzeria INTEGER,
	noLivraison INTEGER GENERATED BY DEFAULT ON NULL AS IDENTITY,
	noPlaque VARCHAR(10), --TODO verifier que çe vehicule n'effectue pas une autres livraison dans la meme tranche horaire.
	noLivreur INTEGER, --TODO vérifier que la meme chose pour le livreur.
	heurDepart TIMESTAMP NOT NULL, 
	heurRetour TIMESTAMP NOT NULL,
		CONSTRAINT PK_ID_LIvraisons 
			PRIMARY KEY (IdPizzeria, NoLivraison),
		CONSTRAINT VIOLATING_NOLIVRESON_POSITIVE 
			CHECK (NoLivraison>0),
		CONSTRAINT VIOLATIONG_TIME_ORDER_CONSTRAINT 
			CHECK (HeurDepart<HeurRetour),
		CONSTRAINT FK_IdPizzeria_NoPlaque_Livraisons 
			FOREIGN KEY(IdPizzeria, NoPlaque) REFERENCES VEHICULES,
	CONSTRAINT FK_IdPizzeria_NoLivreur 
		FOREIGN KEY(IdPizzeria, NoLivreur) REFERENCES EMPLOYES(IdPizzeria, NoEmploye)
);
SET @errors = @errors + @@ERROR 


--------------------------------
--Creation de la table ingredient
--------------------------------
CREATE TABLE INGREDIENTS (
	idPizzeria INTEGER,
	nomIngredient VARCHAR(20) NOT NULL,
		CONSTRAINT PK_ID_Ingredients 
			PRIMARY KEY(IdPizzeria, NomIngredient),
		CONSTRAINT FK_IdPizzeria_Ingredients 
			FOREIGN KEY (IdPizzeria) REFERENCES PIZZERIAS
);
SET @errors = @errors + @@ERROR 


-----------------------------
--Creation de la table extras
-----------------------------
CREATE TABLE EXTRAS(
	idPizzeria INTEGER,
	nomIngredient INTEGER,
	noCommande INTEGER,
	noLigne INTEGER,
		CONSTRAINT PK_ID_Extras 
			PRIMARY KEY (idPizzeria, nomIngredient, noCommande, noLigne),
		CONSTRAINT FK_IdPizzeria_NomIngredient_Extras
			FOREIGN KEY (IdPizzeria, NomIngredient) REFERENCES INGREDIENTS,
		CONSTRAINT FK_IDdeLigne_Commande_Extras 
			FOREIGN KEY(IdPizzeria, NoCommande, NoLigne) REFERENCES LIGNES_COMMANDE
);
SET @errors = @errors + @@ERROR 


----------------------------------
--Creation de la table abilitation
----------------------------------
CREATE TABLE ABILITATION(
	IdPizzeria INTEGER,
	NoLivreur INTEGER,
	TypeVehicule NCHAR(1) NOT NULL,
		CONSTRAINT PK_ID_Abilitation 
			PRIMARY KEY (IdPizzeria, NoLivreur, TypeVehicule),
		CONSTRAINT FK_IDLivreur_Abilitation 
			FOREIGN KEY (IdPizzeria, NoLivreur) REFERENCES LIVREURS(IdPizzeria, noEmploye),
		CONSTRAINT FK_TypeVehicule_Abilitation 
			FOREIGN KEY (TypeVehicule) REFERENCES VEHICULE
);
SET @errors = @errors + @@ERROR 


IF @errors = 0 --Si errors est égale à 0, donc s'il n'y a eu aucune erreur
	COMMIT TRANSACTION création_des_tables -- On commit la transaction
	PRINT 'Statut de l ''erreur : ' + CAST(@@errors AS VARCHAR(10))
ELSE --S il y a eu des erreurs
